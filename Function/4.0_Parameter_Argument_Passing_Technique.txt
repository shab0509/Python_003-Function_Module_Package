# Based on passing the values of arguments to formal parameters,
# the argument or parameter passing mechanisms are classified into 5 types:

# 1. Positional Parameters or Arguments
# 2. Default Parameters or Arguments
# 3. Keyword Parameters or Arguments
# 4. Variable Length Parameters or Arguments
# 5. keyword Variable Length Parameters or Arguments

# 1. Positional Parameters or Arguments
#Def : The number of arguments (Actual Parameter) must equal to the number of formal parameters.
# Also recommends order of parqmeters for Higher Accuracy.
# Python Programming by default follows Positional parameters.
# For ex:

#function Defintion
def functionname(param1, param2, ..... param n)
    --------------------------------------------
    --------------------------------------------


#function Calling
functionname(arg1, arg2, ..... arg n)

# 2. Default Parameters or Arguments
def functionname(param1, param2, ..... param n-1= val1,param n = val2 )
    --------------------------------------------
    --------------------------------------------


# Here param n-1 and param n are "Default Parameter"
# param1, param2, .....  are "Positional Parameter"
# Rule : While using Default Parameter in the function definition,
# they must be used in the last parameters
# For ex :

def circlearea(r,PI = 3.14):
    ac = PI *r**2
    print("Area of circle = {}".format(ac))

circlearea(2.3)
circlearea(4.2)

#3. Keyword parameter or Arguments

# In some circumstances, we know the function name and formal parameter names but we don't know the order of formal parameter
# And in such condition to pass the data we must use the concept of Keyword Parameter or Arguments.
# The implementation of Keyword Parameters or arguments says that all the formal parameter names used as arguments in function calls as keys.
# For ex:

    def functionname(param1, param2 ....... param n)
    --------------------------------------------
    --------------------------------------------

#Functionn Calling
    functionname(param n = val n, param 1 = val 1,......param n-1 = val n-1)
# Here "param n = val n, param 1 = val 1, param n-1 = val n-1" are called keyword Arguments.


#4. Variable Length Parameters or Arguments

# To implement, Variable Length Parameter concept, We must define single functions definition
# and takes a formal parameter preceded with a symbol called astrik( *param ) and the formal parameter
# with astrik symbol is called Variable Length Parameters and whose purpose is to hold/stor any number
# of values coming from similar function calls and whose type is <class,tuple>

#Syntax
 def functionname(list of formal parameter, *param):

#Rule:
# The *param must always be written at last part of function heading and it must be used only once
# When we use Variable Length parameter and default parameter in the function heading, we use default
# parameter at last and before we use variable length parameter in function calls, we should not use
# default parameter as keyword argument coz variable number of values are treated as Positional Argument Values


def findsum(name, *n, crs="PYTHON"):
    print("-----------------------")
    print("Person Name : {} and course: {} ".format(name,crs))
    print("-----------------------")

    s=0
    for v in n:
        print("\t{}".format(v))
        s=s+v
    else:
        print("-----------------------")
        print("\tSum ={} ".format(s))
        print("\tAvg ={} ".format(s/len(n)))
        print("-----------------------")
findsum("Shabi",10 )
findsum("Shabi",10,20)
findsum("Shabi",10,20,30)
findsum("Shabi",10,20,30,-10,12.4,crs="Java")


#5. Keywords Variable Length Parameters or Arguments

To implement, Keywords Variable Length Parameters or Arguments concept, we must define single Function Definition
and takes a formal parameter preceded with a symbol is called "Double Astrik(**param)",
and the formal parameter with double astrik symbol is called Keywords Variable Length Parameters, whose purpose is to
hold any number of Keyword Variable Length values coming from similar function calls & whose type is <class, 'Dict'>

#Syntax
 def functionname(list of formal param, **param):
                  -----------------------
                  -----------------------
#Rule
The **param must always written at last part of function heading and it must be only one.

--------------------------------------------------------------------------------------------
#prg_001

def showinfo(**val):
    print("_"*40)
    for k,v in val.items():
        print("{} -- > {} ".format(k,v))
    else:
        print("_"*40)

showinfo()
showinfo(fno=10,fname='shabi',sub1='python',sub2='Shell')
showinfo(name="Shabi Victor", Des= 'Data Engineer', Exp= '5+')

#prg2

def findtotal(rno,name,cls,**marks):
    totm =0
    print("_"*50)
    print("Roll Number: {}".format(rno))
    print("name : {} , class = {}".format(name,cls))
    print("_"*50)

    for sn,sm in marks.items():
        print(" {} ----> {} ".format(sn,sm))
        totm = totm + sm
    else:
        print("_"*50)
        print("Total Marks = {}".format(totm))

findtotal(10,"Aditya",cls= 'XII',sci=33,soc=86,math=32,eng=90)
findtotal(11,"Bains",cls= 'XII',sci=33,soc=33,math=33,eng=33)


#prg 3  : Example of Global Variable

a=10
def incrementval():
    global a
    a=a+1
    print("Val of a after increment  = {} ".format(a))

def updateval():
    global a
    a = a*2
    print("Val of a after update  = {} ".format(a))

print("Val of a in main prg before increment = {} ".format(a))
incrementval()
print("Val of a in main prg after increment = {} ".format(a))
updateval()
print("Val of a in main prg after update = {} ".format(a))

#prg 4

a=10
b=20

def disp():
     print("OG value of a : {}".format(a))
     print("OG value of b : {}".format(b))

def swapper():
    global a,b #Refering global values a,b
    a=a^b
    b=a^b
    a=a^b
    print("After Swappping, a:{},b:{}".format(a,b))

#main prg
print("OG Value a: {},b; {}".format(a,b))
disp()
swapper()

#prg 5

a=100
b=200
c=300

def operation():
    kvr = globals()
    for k,v in kvr.items():
        print(" {}  ---->  {}".format(k,v))
    else:
        print("Val of a = {}".format(kvr.get('a')))
        print("Val of b = {}".format(kvr.get('b')))
        print("Val of c = {}".format(kvr.get('c')))

operation()

